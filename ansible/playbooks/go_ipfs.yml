---
- hosts: localhost
  become: yes
  tasks:
    - include_vars: "{{ vars_file }}"

    - name: check for existing installation of go-ipfs 0.8.0
      stat:
        path: '/usr/local/go-ipfs/'
      changed_when: False
      register: ipfs_bindir

    - when: not ipfs_bindir.stat.exists
      block:
      - name: download go-ipfs 0.8.0
        get_url:
          url: 'https://dist.ipfs.io/go-ipfs/v0.8.0/go-ipfs_v0.8.0_linux-amd64.tar.gz'
          dest: /tmp/go-ipfs_v0.8.0_linux-amd64.tar.gz
          checksum: 'sha256:cfa1b99fcb315fd866350467a537ce5ebcdfdf2e4a7fabd1e3d94552eb3aefbf'
          mode: 0644
      - name: unarchive go-ipfs 0.8.0
        unarchive:
          remote_src: yes
          src: /tmp/go-ipfs_v0.8.0_linux-amd64.tar.gz
          dest: '/usr/local/'
          creates: '/usr/local/go-ipfs'
      always:
      - name: cleanup spent archive for go-ipfs 0.8.0
        file:
          path: /tmp/go-ipfs_v0.8.0_linux-amd64.tar.gz
          state: absent

    - name: link go-ipfs 0.8.0
      file:
        src: '/usr/local/go-ipfs/ipfs'
        dest: '/usr/local/bin/ipfs'
        state: link

    - name: init ipfs
      become: false
      command: "ipfs init"
      args:
        chdir: "{{ ipfs_work_dir }}"

    - name: config ipfs http headers
      become: false
      command: "ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"http://localhost:5001\", \"http://localhost:3000\", \"http://127.0.0.1:5001\", \"https://webui.ipfs.{{ client_domain }}\"]'"

    - name: config ipfs api address
      become: false
      command: "ipfs config Addresses.API /ip4/0.0.0.0/tcp/5001"

    - name: config ipfs gateway address
      become: false
      command: "ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/8080"